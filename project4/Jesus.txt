ldi r0, 0
ldi r1, 0
ldi r2, 0
ldi r3, 0
ldi r4, 0
ldi r5, 0
ldi r6, 0
ldi r7, 0
ldi r0, 0
// This erasal is used so that the values of all the registers can be started anew without affecting whatever values we may want to use them later. 
// This has caused problems in oter iterations where subtraction is using incorrect values.
ldi r1, r0
inc r0, r0
ld r2, r0
// The code snipets above are to load two different values into the registers
sub r3, r1, r2
brn r3, 6
ldi r5, 0
ldi r4, 7
sub r3, r0, r4
brz r3, 4
brz r5, 56
mova r1, r2
brz r5, 54
ldi r6, 4
shl r6, r6
st r6, r1
ldi r0, 0
ldi r1, 0
ldi r2, 0
ldi r3, 0
ldi r4, 0
ldi r5, 0
ldi r6, 0
ldi r7, 0
ldi r7, 0
ldi r3, 0
ldi r5, 0
ldi r2, 0
ldi r3, 0
ld r5, r3
ldi r3, 1
ld r6, r3
ldi r4, 7
sub r7, r5, r6
brn r7, 2
mova r5, r6
sub r7, r4, r3
inc r3, r3
brz r7, 2
brz r2, -8
ldi r3, 4
shl r3, r3
inc r3, r3
st r3, r5
ldi r0, 0
ldi r1, 0
ldi r2, 0
ldi r3, 0
ldi r4, 0
ldi r5, 0
ldi r6, 0
ldi r7, 0
ldi r0, 0
ldi r5, 0
ldi r6, 3
ld r1, r0
ldi r2, 1
ld r3, r2
add r4, r1, r3
add r5, r5, r4
brz r6, 10
inc r0, r0
inc r0, r0
inc r2, r2
inc r2, r2
dec r6, r6
ld r1, r0
ld r3, r2
ldi r7, 0
brz r7, 53
shr r5, r5
shr r5, r5
shr r5, r5
ldi r0, 7
inc r0, r0
inc r0, r0
inc r0, r0
st r0, r5
ldi r0, 3
jmp r0