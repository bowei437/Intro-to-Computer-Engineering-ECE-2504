// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/01/2015 18:56:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    basicmoduleP1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module basicmoduleP1_vlg_sample_tst(
	a,
	b,
	c,
	d,
	S0,
	S1,
	S2,
	S3,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
input  S0;
input  S1;
input  S2;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d or S0 or S1 or S2 or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module basicmoduleP1_vlg_check_tst (
	chip_dummy_led_output,
	chip_u,
	chip_v,
	gate_dummy_led_output,
	gate_t,
	gate_u,
	gate_v,
	gate_w,
	gate_x,
	gate_y,
	gate_z,
	sampler_rx
);
input [3:0] chip_dummy_led_output;
input  chip_u;
input  chip_v;
input [3:0] gate_dummy_led_output;
input  gate_t;
input  gate_u;
input  gate_v;
input  gate_w;
input  gate_x;
input  gate_y;
input  gate_z;
input sampler_rx;

reg [3:0] chip_dummy_led_output_expected;
reg  chip_u_expected;
reg  chip_v_expected;
reg [3:0] gate_dummy_led_output_expected;
reg  gate_t_expected;
reg  gate_u_expected;
reg  gate_v_expected;
reg  gate_w_expected;
reg  gate_x_expected;
reg  gate_y_expected;
reg  gate_z_expected;

reg [3:0] chip_dummy_led_output_prev;
reg  chip_u_prev;
reg  chip_v_prev;
reg [3:0] gate_dummy_led_output_prev;
reg  gate_t_prev;
reg  gate_u_prev;
reg  gate_v_prev;
reg  gate_w_prev;
reg  gate_x_prev;
reg  gate_y_prev;
reg  gate_z_prev;

reg  gate_t_expected_prev;

reg  last_gate_t_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	chip_dummy_led_output_prev = chip_dummy_led_output;
	chip_u_prev = chip_u;
	chip_v_prev = chip_v;
	gate_dummy_led_output_prev = gate_dummy_led_output;
	gate_t_prev = gate_t;
	gate_u_prev = gate_u;
	gate_v_prev = gate_v;
	gate_w_prev = gate_w;
	gate_x_prev = gate_x;
	gate_y_prev = gate_y;
	gate_z_prev = gate_z;
end

// update expected /o prevs

always @(trigger)
begin
	gate_t_expected_prev = gate_t_expected;
end



// expected gate_t
initial
begin
	gate_t_expected = 1'bX;
end 
// generate trigger
always @(chip_dummy_led_output_expected or chip_dummy_led_output or chip_u_expected or chip_u or chip_v_expected or chip_v or gate_dummy_led_output_expected or gate_dummy_led_output or gate_t_expected or gate_t or gate_u_expected or gate_u or gate_v_expected or gate_v or gate_w_expected or gate_w or gate_x_expected or gate_x or gate_y_expected or gate_y or gate_z_expected or gate_z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected chip_dummy_led_output = %b | expected chip_u = %b | expected chip_v = %b | expected gate_dummy_led_output = %b | expected gate_t = %b | expected gate_u = %b | expected gate_v = %b | expected gate_w = %b | expected gate_x = %b | expected gate_y = %b | expected gate_z = %b | ",chip_dummy_led_output_expected_prev,chip_u_expected_prev,chip_v_expected_prev,gate_dummy_led_output_expected_prev,gate_t_expected_prev,gate_u_expected_prev,gate_v_expected_prev,gate_w_expected_prev,gate_x_expected_prev,gate_y_expected_prev,gate_z_expected_prev);
	$display("| real chip_dummy_led_output = %b | real chip_u = %b | real chip_v = %b | real gate_dummy_led_output = %b | real gate_t = %b | real gate_u = %b | real gate_v = %b | real gate_w = %b | real gate_x = %b | real gate_y = %b | real gate_z = %b | ",chip_dummy_led_output_prev,chip_u_prev,chip_v_prev,gate_dummy_led_output_prev,gate_t_prev,gate_u_prev,gate_v_prev,gate_w_prev,gate_x_prev,gate_y_prev,gate_z_prev);
`endif
	if (
		( gate_t_expected_prev !== 1'bx ) && ( gate_t_prev !== gate_t_expected_prev )
		&& ((gate_t_expected_prev !== last_gate_t_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gate_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gate_t_expected_prev);
		$display ("     Real value = %b", gate_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_gate_t_exp = gate_t_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module basicmoduleP1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg S0;
reg S1;
reg S2;
reg S3;
// wires                                               
wire [3:0] chip_dummy_led_output;
wire chip_u;
wire chip_v;
wire [3:0] gate_dummy_led_output;
wire gate_t;
wire gate_u;
wire gate_v;
wire gate_w;
wire gate_x;
wire gate_y;
wire gate_z;

wire sampler;                             

// assign statements (if any)                          
basicmoduleP1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.chip_dummy_led_output(chip_dummy_led_output),
	.chip_u(chip_u),
	.chip_v(chip_v),
	.d(d),
	.gate_dummy_led_output(gate_dummy_led_output),
	.gate_t(gate_t),
	.gate_u(gate_u),
	.gate_v(gate_v),
	.gate_w(gate_w),
	.gate_x(gate_x),
	.gate_y(gate_y),
	.gate_z(gate_z),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3)
);

// d
always
begin
	d = 1'b0;
	d = #500000 1'b1;
	#500000;
end 

// c
always
begin
	c = 1'b0;
	c = #250000 1'b1;
	#250000;
end 

// b
always
begin
	b = 1'b0;
	b = #125000 1'b1;
	#125000;
end 

// a
always
begin
	a = 1'b0;
	a = #62500 1'b1;
	#62500;
end 

basicmoduleP1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_tx(sampler)
);

basicmoduleP1_vlg_check_tst tb_out(
	.chip_dummy_led_output(chip_dummy_led_output),
	.chip_u(chip_u),
	.chip_v(chip_v),
	.gate_dummy_led_output(gate_dummy_led_output),
	.gate_t(gate_t),
	.gate_u(gate_u),
	.gate_v(gate_v),
	.gate_w(gate_w),
	.gate_x(gate_x),
	.gate_y(gate_y),
	.gate_z(gate_z),
	.sampler_rx(sampler)
);
endmodule

