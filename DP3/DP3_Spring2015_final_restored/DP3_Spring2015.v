//   *************************************
//   Do not modify this file. 
//   *************************************
//  File: DP3 Spring 2015
//  ECE 2504 Spring 2015
//  Top level file for Design Project 3
//  The Simple CPU from Chapter 9
//  
//  This is a simplified version of the basiccpu module
//  created by Xin Xin in June 2012.
//  Author: Created by Tom Martin 11/11/2012
//  Modified by P. Athanas 3/2013
//  Modified by KLC 11/2013
//  Modified by Hsiao 10/2015
//  Changes:
//  1. The accelerometer has been removed
//  2. The modules have been re-arranged in the files 
//     to indicate which modules can be changed and which
//     must not be changed. 
//  3. This version uses all four DIP switches to control the LEDs 
//     instead of having one control whether the clock is enabled
//     by the pushbutton.
//  4. KEY0 is the reset and KEY1 is the clock enable to be consistent
//     with project 2.
//  5. Added Sources and Probes interface, allowing the internal signals
//     to be viewed in tcl interface.
//  6. Added r6 and r7 (but not toggling of LEDs to display these)
//
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
// **************************************************************
// You are not permitted to modify this file.
// ****************************************************************

`timescale 1 ns/1 ps

module DP3_Spring2015 (
   //////////// CLOCK //////////
   CLOCK_50,
   //////////// LED //////////
   LED,
   //////////// KEY //////////
   KEY,
   //////////// SW //////////
   SW 
);

//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input                       CLOCK_50;

//////////// LED //////////
output           [7:0]      LED;

//////////// KEY //////////
input            [1:0]      KEY;

//////////// SW //////////
input            [3:0]      SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================


wire cpu0_clk;
wire cpu0_clk_en;
wire cpu0_rst;
wire [15:0] r0,r1,r2,r3,r4,r5,r6,r7,PC,IR /* synthesis keep */;
wire rst_inv;
wire CLOCK_50;
reg  cpu0_clk_en_delay0, cpu0_clk_en_delay1;
reg [7:0] counter;
wire cpu_clk;

//=======================================================
//  Structural coding
//=======================================================

assign rst_inv = ~KEY[0]; // In this sense, rst should be a active low signal.

assign cpu_clk =  cpu0_clk; 

cpu cpu0 ( 
   .rst(rst_inv), 
   .clk(cpu_clk), 
   .r0(r0),
   .r1(r1),
   .r2(r2),
   .r3(r3),
   .r4(r4),
   .r5(r5),
   .r6(r6),
   .r7(r7),
   .IR(IR),
   .PC(PC)
);

// Provide Sources&Probe iterface to internal signals.
wire [15:0] unused;
dp3_probe debug ({16'h0, PC, IR, r7, r6, r5, r4, r3, r2, r1, r0}, {unused});

// The following finite state machine and clock assignments allows the CPU to 
// use KEY1 as the clock signal.  KEY1 is gated with the 50 MHz clock to 
// generate one 50 MHz clock pulse every time KEY1 is pushed.      
// 
// This finite state machine generates one clock enable signal per button push.
button_fsm button_fsm0 ( 
  .rst(rst_inv), 
  .clk(CLOCK_50), 
  .button(KEY[1]), 
  .cpu0_clk_en(cpu0_clk_en)
 );

 //This is Altera's recommended way to implement clock gating.    
 always@(posedge CLOCK_50) //make sure cpu0_clk_en_delay0 is one clock cycle
   cpu0_clk_en_delay0 = cpu0_clk_en;
 always@(negedge CLOCK_50)
   cpu0_clk_en_delay1 = cpu0_clk_en_delay0;
 assign cpu0_clk =  cpu0_clk_en_delay1 & CLOCK_50;
//   End of clock generation portion.
 
 
// Assign the LEDs based upon the DIP switch settings.   
mux16_1_8bits LED_mux(LED, SW, IR[15:8], IR[7:0], PC[15:8], PC[7:0], r5[15:8], r5[7:0], r4[15:8], r4[7:0], r3[15:8], r3[7:0], r2[15:8], r2[7:0], r1[15:8], r1[7:0], r0[15:8], r0[7:0]);

endmodule
